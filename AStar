using System;
using System.Collections.Generic;

namespace NewPlayer {
    public struct Point {
        public int PointX; //x axis position  
        public int PointY; //y axis position
    }

    class AStar {
        public List<Node> OpenList;
        public List<Node> ClosedList;
        public int MinX, MaxX, MinY, MaxY;
        public bool CarriedFood;
        public bool isSuccess;
        Point DestPoint = new Point(); //destination position
        public List<Point> HillList;
        public List<Point> FoodList;

        public AStar() {
            OpenList = new List<Node>();
            ClosedList = new List<Node>();
            HillList = new List<Point>();
            FoodList = new List<Point>();
            MinX = 0;
            MinY = 0;
            MaxX = 11;
            MaxY = 11;
            CarriedFood = false;
            isSuccess = false;
        }

        public bool isDest(Point position) {
            if (position.PointX == DestPoint.PointX && position.PointY == DestPoint.PointY)
            {
                if (CarriedFood == true)
                {
                    isSuccess = true;
                    return true;
                }
                return false;
            }
            return false;
        }

        public Point getNearFood(int x, int y) {
            double CurrentValue = 0;
            int CurrentMinIndex = 0;
            double CurrentMinValue = Math.Sqrt(Math.Pow(FoodList[0].PointX - x, 2) + Math.Pow(FoodList[0].PointY - y, 2));
            for (int i = 0; i < FoodList.Count; i++)
            {
                CurrentValue = Math.Sqrt(Math.Pow(FoodList[i].PointX - x, 2) + Math.Pow(FoodList[i].PointY - y, 2));
                if (CurrentMinValue > CurrentValue)
                {
                    CurrentMinValue = CurrentValue;
                    CurrentMinIndex = i;
                }
            }
            
            Point ReturnPosition;
            ReturnPosition.PointX = FoodList[CurrentMinIndex].PointX;
            ReturnPosition.PointY = FoodList[CurrentMinIndex].PointY;
            return ReturnPosition;
        }

        public void fillDestPos(int x, int y) {
            DestPoint.PointX = x;
            DestPoint.PointY = y;
        }

        public double onPredict(Point pos) {
            /*
             * Now predict the heuristic value
             */
            double h = Math.Sqrt(Math.Pow(DestPoint.PointX - pos.PointX, 2) + Math.Pow(DestPoint.PointY - pos.PointY, 2));
            return h;
        }

        public void addToOpen(Node node) {
            OpenList.Add(node);
        }

        public void addToClose(Node node) {
            ClosedList.Add(node);
        }

        public Node fetchOpen() {
            /* 
             * fetch the min value in the open list
             */
            double cur_evual_value = 0;
            int cur_min_index = 0;
            double cur_minValue = onPredict(OpenList[0].Position);
            for (int i = 0; i < OpenList.Count; i++)
            {
                cur_evual_value = onPredict(OpenList[i].Position);
                if (cur_evual_value < cur_minValue)
                {
                    cur_minValue = cur_evual_value;
                    cur_min_index = i;
                }

            }
            Node return_node = OpenList[cur_min_index];
            OpenList.RemoveAt(cur_min_index);
            if (cur_minValue == 0)
            {
                CarriedFood = true;
            }
            return return_node;
        }

        /*
         * deploy one node form the openlist
         */
        public void onDeploy(Node node) {
            Point CurrentWestPos;
            //node.mCurrent_evalue = node.mCurrent_evalue;
            CurrentWestPos.PointX = node.Position.PointX - 1;
            CurrentWestPos.PointY = node.Position.PointY;
            if (node.Position.PointX > MinX) {
                Node CurrentWestNode = new Node();
                CurrentWestNode.CurrentValue = node.CurrentValue + 1;
                CurrentWestNode.Position = CurrentWestPos;
                CurrentWestNode.Parent = node;
                CurrentWestNode.Predict_value = onPredict(CurrentWestNode.Position);
                OpenList.Add(CurrentWestNode);
            }
            
            Point CurrentEastPos;
            CurrentEastPos.PointX = node.Position.PointX + 1;
            CurrentEastPos.PointY = node.Position.PointY;
            if (node.Position.PointX < MaxX) {
                Node CurrentEastNode = new Node();
                CurrentEastNode.CurrentValue = node.CurrentValue + 1;
                CurrentEastNode.Position = CurrentEastPos;
                CurrentEastNode.Parent = node;
                CurrentEastNode.Predict_value = onPredict(CurrentEastNode.Position);
                OpenList.Add(CurrentEastNode);
            }
            
            Point CurrentNorthPos;
            CurrentNorthPos.PointY = node.Position.PointY + 1;
            CurrentNorthPos.PointX = node.Position.PointX;
            if (node.Position.PointY < MaxY) {
                Node CurrentNorthNode = new Node();
                CurrentNorthNode.CurrentValue = node.CurrentValue + 1;
                CurrentNorthNode.Position = CurrentNorthPos;
                CurrentNorthNode.Parent = node.Parent;
                CurrentNorthNode.Predict_value = onPredict(CurrentNorthNode.Position);
                OpenList.Add(CurrentNorthNode);
            }
            
            Point CurrentSouthPos;
            CurrentSouthPos.PointX = node.Position.PointX;
            CurrentSouthPos.PointY = node.Position.PointY - 1;
            if (node.Position.PointY > MinY) {
                Node CurrentSouthNode = new Node();
                CurrentSouthNode.CurrentValue = node.CurrentValue + 1;
                CurrentSouthNode.Position = CurrentSouthPos;
                CurrentSouthNode.Parent = node.Parent;
                CurrentSouthNode.Predict_value = onPredict(CurrentSouthNode.Position);
                OpenList.Add(CurrentSouthNode);
            }

        }

        public void onStep() {
            Node cur_MinNode = fetchOpen();
            if (onEvalute(cur_MinNode)) return;
            onDeploy(cur_MinNode);
        }

        public bool onEvalute(Node node) {
            if (onPredict(node.Position) == 0) return true;
            return false;
        }

        public void initiateOpen() {
            OpenList.Clear();
        }

        public bool isNoHill(Point pos) {
            for (int i = 0; i < HillList.Count; i++) {
                if (pos.Equals(HillList[i])) return false;
            }
            return true;
        }
    }
}
